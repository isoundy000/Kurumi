//tolua++ -L basic.lua -o lua_dubase.cpp dubase.pkg

$#include "DUObject.h"
$#include "DUScheduler.h"
$#include "net/DUServer.h"
$#include "DUGame.h"
$#include "TestOBJ.h"

class DUObject
{
public:
    DUObject();
    
    ~DUObject();
    
    virtual DUObject* retain();
    
    virtual void release();
    
    void printCount();
};



class DUScheduler : public DUObject
{
public:
    
    static DUScheduler* getInstance();

    //pause
    void pauseSchedule(DUObject* pTarget);
    
    void pauseSchedule(void *pTarget, const std::string& key);
    
    void pauseSchedule(const std::string& key);
    
    //resume
    void resumeSchedule(DUObject* pTarget);
    
    void resumeSchedule(void *pTarget, const std::string& key);
    
    void resumeSchedule(const std::string& key);
    
    //cancel
    void unScheduleByObject(DUObject *pTarget);
    
    void unScheduleSeletorByKey(void *pTarget, const std::string& key);
    
    void unScheduleSeletorByKey(const std::string& key);
    
    void unScheduleSeletorByObject(void *pTarget);
    
    void unScheduleAll();
	
	std::string registerScripSchedule(LuaFunction func, float interval, bool paused);
    
	void unRegisterScripSchedule(const std::string& key);
};


class DUServer : public DUObject
{
public:
	DUServer();
	~DUServer();

	void startServer(const char* ip, unsigned int port, bool isIPV6);

	bool stopServer();

	void send(Session* session, char* data, unsigned int len);

	void disconnect(Session* session);

	bool isCloseFinish();
	
	//LuaFunctionBond
	void registerLuaHandle(const std::string& name, LuaFunction handle);

	void unregisterLuaHandle(const std::string& name);

	void clearLuaHandle();
};


class DUGame
{
public:
	static DUGame* getInstance();
	static void destroy();

	void setInterval(float interval);

	bool isFileExist(const char* filename);
};


class TestOBJ
{
public:
	TestOBJ();
	
	~TestOBJ();
	
	void Test();
};

